The ``7-base_geometry`` module
======================

Using ``integer_validator``
-------------------

Access the function to test:

       >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Tests to run:

      create instance:
      >>> bg = BaseGeometry()

      normal case 1:
      >>> bg.integer_validator("my_int", 12)

      normal case 2:
      >>> bg.integer_validator("width", 89)

      two strings:
      >>> bg.integer_validator("name", "John")
      Traceback (most recent call last):
      ...
      TypeError: name must be an integer

      zero value:
      >>> bg.integer_validator("age", 0)
      Traceback (most recent call last):
      ...
      ValueError: age must be greater than 0

      string emtpy:
      >>> bg.integer_validator("", 5)

      negative value:
      >>> bg.integer_validator("distance", -4)
      Traceback (most recent call last):
      ...
      ValueError: distance must be greater than 0

      is subclass:
      >>> isinstance(bg, BaseGeometry)
      True

      None case:
      >>> bg.integer_validator("None", None)
      Traceback (most recent call last):
      ...
      TypeError: None must be an integer

      nan case:
      >>> import math
      >>> bg.integer_validator("nan", math.nan)
      Traceback (most recent call last):
      ...
      TypeError: nan must be an integer

      no args:
      >>> bg.integer_validator()
      Traceback (most recent call last):
      ...
      TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

      1 arg:
      >>> bg.integer_validator("one arg")
      Traceback (most recent call last):
      ...
      TypeError: integer_validator() missing 1 required positional argument: 'value'

      check area:
      >>> bg.area()
      Traceback (most recent call last):
      ...
      Exception: area() is not implemented

      check float('inf')
      >>> bg.integer_validator("infinity", float('inf'))
      Traceback (most recent call last):
      ...
      TypeError: infinity must be an integer

      check for floats:
      >>> bg.integer_validator("float", 10 / 3)
      Traceback (most recent call last):
      ...
      TypeError: float must be an integer
      
round float, check int cast is corect

The ``1-my_list`` module
======================

Using ``print_sorted``
-------------------

Access the function to test:

       >>> MyList = __import__('1-my_list').MyList

Tests to run:

      case: normal
      >>> my_list = MyList()
      >>> my_list.append(1)
      >>> my_list.append(4)
      >>> my_list.append(2)
      >>> my_list.append(3)
      >>> my_list.append(5)
      >>> my_list.print_sorted()
      [1, 2, 3, 4, 5]

      case: not sorted v1
      >>> my_list = MyList()
      >>> my_list.append(3)
      >>> my_list.append(4)
      >>> my_list.append(5)
      >>> my_list.append(1)
      >>> my_list.append(2)
      >>> my_list.print_sorted()
      [1, 2, 3, 4, 5]

      case: not sorted v2
      >>> my_list = MyList()
      >>> my_list.append(5)
      >>> my_list.append(2)
      >>> my_list.append(4)
      >>> my_list.append(3)
      >>> my_list.append(1)
      >>> my_list.print_sorted()
      [1, 2, 3, 4, 5]

      case: not sorted negative numbers
      >>> my_list = MyList()
      >>> my_list.append(5)
      >>> my_list.append(-20)
      >>> my_list.append(4)
      >>> my_list.append(-100)
      >>> my_list.append(1)
      >>> my_list.print_sorted()
      [-100, -20, 1, 4, 5]

      case: empty
      >>> my_list = MyList()
      >>> my_list.append(None)
      >>> my_list.append(None)
      >>> my_list.append(None)
      >>> my_list.print_sorted()
      Traceback (most recent call last):
      ...
      TypeError: '<' not supported between instances of 'NoneType' and 'NoneType'

      case: nan
      >>> import math
      >>> my_list = MyList()
      >>> my_list.append(math.nan)
      >>> my_list.print_sorted()
      [nan]

      case: nan
      >>> import math
      >>> my_list = MyList()
      >>> my_list.append(math.nan)
      >>> my_list.print_sorted()
      [nan]

      case:  missing list
      >>> new_list = MyList([])
      >>> new_list.print_sorted()
      []

      case:  missing arg
      >>> new_list = MyList()
      >>> new_list.print_sorted()
      []

      case: subclass test
      >>> issubclass(MyList, list)
      True

      case: is instance
      >>> isinstance(my_list, MyList)
      True
